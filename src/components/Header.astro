---
import Logo from "./Logo.astro";
import Themetoggle from "./Themetoggle.astro";
---

<style>
  .header {
    position: fixed;
    width: 180px;
    margin: 30px;
    text-align: center;
  }

  @media (max-width: 1230px) {
    .header {
      padding-top: 50px;
      position: initial;
      width: 180px;
      margin: 0 auto;
      text-align: center;
    }
  }

  #account {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 0.75rem;

    font-size: 1rem;
    color: #aeb2b7;
    font-weight: 300;
    margin-top: 1rem;
  }

  #loading {
    background: #000;
    position: fixed;
    inset: 0;
    z-index: 1;
  }
</style>

<!-- <div id="loading"><img src="/loader.gif" /></div> -->
<header class="header">
  <div class="fb">
    <Logo />
    <Themetoggle />
  </div>
  <div class="fi mt-2">
    <span class="gpt-title">GROK</span>
    <span class="gpt-subtitle">AI 2.0</span>
  </div>
  <!-- <p mt-1 op-60>Based on GROK xAI</p> -->
  <div id="account"></div>
</header>

<!-- <script>
  import {
    configureChains,
    createClient,
    watchAccount,
    disconnect,
    fetchBalance,
  } from "@wagmi/core";
  import { bscTestnet, bsc } from "@wagmi/core/chains";
  import {
    EthereumClient,
    w3mConnectors,
    w3mProvider,
  } from "@web3modal/ethereum";

  import clientList from "../clientList";

  // 1. Define constants
  const projectId = "8e6b5ffdcbc9794bf9f4a1952578365b";
  const chains = [bsc, bscTestnet];

  // 2. Configure wagmi client
  const { provider } = configureChains(chains, [w3mProvider({ projectId })]);
  const wagmiClient = createClient({
    autoConnect: true,
    connectors: [...w3mConnectors({ chains, version: 1, projectId })],
    provider,
  });

  const ethereumClient = new EthereumClient(wagmiClient, chains);

  /* const clientAddress = ethereumClient.getAccount().address; */
  const ethereumAddress = ethereumClient.getAccount().address;

  /* if(!clientAddress || !clientList.find((item) => clientAddress.toLowerCase() === item.toLowerCase())) {
    window.location.href = "/connect";
  } */
  //if(!clientAddress /* || !clientList.find((item) => clientAddress.toLowerCase() === item.toLowerCase()) */) {
  //  window.location.href = "/connect";
  //}

  async function getBalanceToken(_address) {
    let balancete = await fetchBalance({
      address: _address,
      token: "0x7a76573b4e0207f58921C7356B800B6cea590131",  // $GROK20
      formatUnits: "gwei",
    });

    return balancete;
  }

  watchAccount((account) => {
    getBalanceToken(account.address || ethereumAddress).then((response) => {
      console.log(response.formatted);

      verifyAccount(response.formatted, account);

    });
  });

  function verifyAccount(balance, account) {

    const loading = document.querySelector("#loading");
    loading.style.display = "block";

    const clientAddress = account.address;

    if ((!clientAddress && !ethereumAddress) || balance < 10000) {
      window.location.href = "/connect";
    } else {
      loading.style.display = "none";

      const mainAddress = clientAddress || ethereumAddress;

      //console.log("mainAddress", mainAddress);

      const addressSpan = document.querySelector("#account");
      const resumedAddressA = mainAddress.slice(0, 5);
      const resumedAddressB = mainAddress.slice(-4);
      const resumedAddress = `
        <span class="home-page__address">${resumedAddressA}...${resumedAddressB}</span>
        <button type="button" id="home-page__disconnectButton"><img src="/logout-icon.svg" class="home-page__disconnectIcon" width="20"/></button>
      `;
      addressSpan.innerHTML = resumedAddress;

      const disconnectButton = document.querySelector(
        "#home-page__disconnectButton"
      );
      disconnectButton.addEventListener("click", () => {
        disconnect();
        window.location.reload();
      });
    }
  }
</script>
 -->